version: '3.8'
services:
  # 1. React Frontend
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://gateway:9898
    ports:
      - "3000:3000"
    networks:
      - msa-network

  # 2. Chat Service (Redis 사용)
  chat-service:
    container_name: chat-service
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    ports:
      - "9292:9292"
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
    networks:
      - msa-network

  # 3. Eureka Server
  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - msa-network

  # 4. Exam Service (MySQL 사용)
  exam-service:
    container_name: exam-service
    build:
      context: ./exam-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USER: "user"
      DB_PASSWORD: "user123"
    networks:
      - msa-network

  # 5. Gateway (MySQL + Redis 사용)
  gateway:
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "9898:9898"
    environment:
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USER: "user"
      DB_PASSWORD: "user123"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
    networks:
      - msa-network

  # 6. Lecture Service (MySQL 사용)
  lecture-service:
    container_name: lecture-service
    build:
      context: ./lecture-service
      dockerfile: Dockerfile
    ports:
      - "9696:9696"
    environment:
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USER: "user"
      DB_PASSWORD: "user123"
    networks:
      - msa-network

  # 7. Notice Service (MySQL 사용)
  notice-service:
    container_name: notice-service
    build:
      context: ./notice-service
      dockerfile: Dockerfile
    ports:
      - "9797:9797"
    environment:
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USER: "user"
      DB_PASSWORD: "user123"
    networks:
      - msa-network

  # 8. Recruitment Service (Redis 사용)
  recruitment-service:
    container_name: recruitment-service
    build:
      context: ./recruitment-service
      dockerfile: Dockerfile
    ports:
      - "7979:7979"
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
    networks:
      - msa-network

  # 9. Review Service
  review-service:
    container_name: review-service
    build:
      context: ./review-service
      dockerfile: Dockerfile
    ports:
      - "9494:9494"
    networks:
      - msa-network

  # 10. MySQL Database (3309 포트 사용)
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: "lms"
    ports:
      - "3309:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - msa-network

  # 11. Redis Cache
  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - msa-network

  # 12. Nginx Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - msa-network
    depends_on:
      - frontend
      - gateway
      - eureka-server
      - chat-service
      - exam-service
      - lecture-service
      - notice-service
      - recruitment-service
      - review-service

  # Admin Service 추가
  admin-service:
    container_name: admin-service
    build:
      context: ./admin-service
      dockerfile: Dockerfile
    ports:
      - "9595:9595"
    environment:
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USER: "user"
      DB_PASSWORD: "user123"
    networks:
      - msa-network

networks:
  msa-network:
    driver: bridge

volumes:
  mysql_data:
